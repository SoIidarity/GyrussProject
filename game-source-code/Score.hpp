/////////////////////////////////////////////////////////////////////
/// \brief   Object and methods to keep score of player actions
/////////////////////////////////////////////////////////////////////

#ifndef PROJECT_SCORE_HPP
#define PROJECT_SCORE_HPP

#include "common.hpp"

////////////////////////////////////////////////////////////
/// \brief Score class, to store and calculate all player game scores.
////////////////////////////////////////////////////////////
class Score
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief When the player Killes an enemy, this is called with the defined enemy type.
    /// Based on the type of enemy, different scores are given to the player. these scores are stored.
    ///
    /// \param type provides the kind of enemy that was killed
    ///
    /// \see common
    /// \see addToScore
    ////////////////////////////////////////////////////////////
    void incrementEnemiesKilled(entity::ID type);

    ////////////////////////////////////////////////////////////
    /// \brief On shooting a bullet, is called to increment the number of bullets shot
    ///
    /// \see _bulletsFired
    ////////////////////////////////////////////////////////////
    void incrementBulletsFired();

    ////////////////////////////////////////////////////////////
    /// \brief Run on every frame to update the player current lite time. adds points to the player
    /// score for living longer
    ////////////////////////////////////////////////////////////
    void update();

    ////////////////////////////////////////////////////////////
    /// \brief Resets all private member variables relevant to game score. Used
    /// when a new game is started.
    ////////////////////////////////////////////////////////////
    void reset();

    ////////////////////////////////////////////////////////////
    /// \brief Accessor to provide the current game score.
    ///
    /// \return _score The current score of the player
    ////////////////////////////////////////////////////////////
    const unsigned int getScore() const;

    ////////////////////////////////////////////////////////////
    /// \brief Accessor to provide the current number of enemies killed.
    ///
    /// \return _enemiesKilled The current number of killed
    ////////////////////////////////////////////////////////////
    const unsigned int getEnemiesKilled() const;

    ////////////////////////////////////////////////////////////
    /// \brief Accessor to provide the total number of player bullets fire events
    ///
    /// \return The value of _bulletsFired (The total number of player bullets fired)
    ////////////////////////////////////////////////////////////
    const unsigned int getBulletsFired() const;

    ////////////////////////////////////////////////////////////
    /// \brief Accessor to calculate the playerAccuracy. This is defined as the
    /// (total enemies hit)/(total number of bullets fired)
    ///
    /// \return Calculated Player accuracy value
    ////////////////////////////////////////////////////////////
    const float getPlayerAccuracy() const;

    ////////////////////////////////////////////////////////////
    /// \brief Accessor to return the time alive for the current player life
    ///
    /// \return sf::Clock _lifeTimer, the current player life length
    ////////////////////////////////////////////////////////////
    const float getTimeAlive() const;

    ////////////////////////////////////////////////////////////
    /// \brief Accessor to return the longest life the player achieved
    ///
    /// \return _longestTimeAlive, longest player life
    ////////////////////////////////////////////////////////////
    const float getLongestTimeAlive() const;

    ////////////////////////////////////////////////////////////
    /// \brief Resets current player life timer
    ////////////////////////////////////////////////////////////
    const void resetLifeTimer();

private:
    ////////////////////////////////////////////////////////////
    /// \brief Function to add points to the current player score variable
    ///
    /// \param points integer number of points to add to the player score
    ////////////////////////////////////////////////////////////
    void addToScore(int points);

    ////////////////////////////////////////////////////////////
    /// \brief Integer to store the current player score
    ///
    /// \see getScore()
    ////////////////////////////////////////////////////////////
    unsigned int _score;

    ////////////////////////////////////////////////////////////
    /// \brief Int to store the number of Enemies killed
    ///
    /// \see getEnemiesKilled
    ////////////////////////////////////////////////////////////
    unsigned int _enemiesKilled;

    ////////////////////////////////////////////////////////////
    /// \brief Int to store the number of bullets fired
    ///
    /// \see getBulletsFired
    ////////////////////////////////////////////////////////////
    unsigned int _bulletsFired;

    ////////////////////////////////////////////////////////////
    /// \brief int to store the number of bullets hit
    ////////////////////////////////////////////////////////////
    unsigned int _bulletsHit;

    ////////////////////////////////////////////////////////////
    /// \brief sf::Clock to store the length of the current player life
    ///
    /// \see getTimeAlive
    ////////////////////////////////////////////////////////////
    sf::Clock _lifeTimer;

    ////////////////////////////////////////////////////////////
    /// \brief sf::Clock to store the time elapsed between updates.
    ////////////////////////////////////////////////////////////
    sf::Clock _updateTimer;

    ////////////////////////////////////////////////////////////
    /// \brief Float to store the longest player life
    ///
    /// \see getLongestTimeAlive
    ////////////////////////////////////////////////////////////
    float _longestTimeAlive;

    ////////////////////////////////////////////////////////////
    /// \brief Float to store the current survival time of the player, to check on every frame update.
    /// Used when incrementing score for time alive
    ////////////////////////////////////////////////////////////
    float _survivalTime;
};

#endif //PROJECT_SCORE_HPP
